// <auto-generated />
using DevelopmentChallenge.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevelopmentChallenge.Database.Migrations
{
    [DbContext(typeof(DevelopmentChallengeContext))]
    partial class DevelopmentChallengeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("DevelopmentChallenge.Domain.Entities.MDR", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Adquirente")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MDRs");
                });

            modelBuilder.Entity("DevelopmentChallenge.Domain.Entities.Taxa", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bandeira")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Credito")
                        .HasColumnType("REAL");

                    b.Property<double>("Debito")
                        .HasColumnType("REAL");

                    b.Property<string>("MDRId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MDRId");

                    b.ToTable("Taxas");
                });

            modelBuilder.Entity("DevelopmentChallenge.Domain.Entities.Taxa", b =>
                {
                    b.HasOne("DevelopmentChallenge.Domain.Entities.MDR", "MDR")
                        .WithMany()
                        .HasForeignKey("MDRId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MDR");
                });
#pragma warning restore 612, 618
        }
    }
}
